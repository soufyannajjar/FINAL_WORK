<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>
        Emotify - Watch
    </title>
    <meta name="description" content="" />
    <meta name="keywords" content="" />
    <meta name="author" content="" />
    <link rel="stylesheet" href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css" />
    <link rel="stylesheet" href="/assets/css/style.css" />
    <script src="/assets/js/face-api.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js"></script>

    <style>
        #check {
            margin: 0;
            padding: 0;
            width: 100vw;
            height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        canvas {
            position: absolute;
            display: none;
        }

        #play_button,
        #pause_button,
        #vol_img {
            float: left;
            height: 30px;
            margin-left: 2px;
            margin-right: 5px;
            margin-top: 2px;
        }

        #change_vol {
            width: 90%;
            height: 30px;
            accent-color: #6663F1;

        }
    </style>
</head>

<body class="leading-normal tracking-normal gradient pt-24 h-screen">
    <%- include('appHeader') %>

    <div class="container mx-auto">
        <div class="flex flex-nowrap justify-center my-12">

            <div
                class="w-full md:mr-2 justify-center bg-white p-5 md:mb-0 rounded-lg w-4/4 xl:w-1/4 lg:w-3/12 select-none">
                <div class=" gradient py-8 px-2 text-white text-center rounded">
                    <h1 class="bg-transparent text-3xl "><%= video.title %> â‚¬</h1>
                </div>
                <b>Description</b>
                <p><%= video.description %></p>
                <b>Age range</b>
                <p class="text-blue-600 font-normal text-base"><%= video.audienceMinAge %> -
                    <%= video.audienceMaxAge %> Year</p>

                <hr class="mt-4">
            </div>

            <div class="justify-center bg-white p-5 rounded-lg w-full xl:w-3/4 lg:w-9/12">
                <h1 class="pt-4 text-2xl text-center">WATCH & EARN</h1>
                <p class="text-center text-red-400" id="errorMessage"></p>


                <div class="mb-6 text-center" id="beforeVideo">
                    <p class="mt-2 text-center">Please accept access to your webcam via your internet browser. <br>
                        Put your face in front of your webcam and watch the video attentively. <br>To start, press the
                        button below.</p><br>
                    <h1 id="checkWebcam" class="text-2xl">Checking for webcam...</h1>
                    <lottie-player id="loading" src="https://assets7.lottiefiles.com/private_files/lf30_lndg7fhf.json"
                        background="transparent" speed="2" style="width: 100px; height: 100px; margin: 0 auto;" loop
                        autoplay>
                    </lottie-player>
                    <button id="refreshButton" onClick="document.location.reload(true)"
                        class="mx-auto text-center mx-20 lg:mx-0 hover:underline gradient text-white font-bold rounded-full my-6 py-4 px-8 shadow-lg focus:outline-none focus:shadow-outline transform transition hover:scale-105 duration-300 ease-in-out">
                        Try again
                    </button>
                    <button onclick="play_vid()" id="playbutton"
                        class="mx-auto text-center mx-20 lg:mx-0 hover:underline gradient text-white font-bold rounded-full my-6 py-4 px-8 shadow-lg focus:outline-none focus:shadow-outline transform transition hover:scale-105 duration-300 ease-in-out">
                        Start the video
                    </button>
                </div>
                <div id='player_controls' style="margin: 0 20%">
                    <img src="/assets/images/icons/volume.png" id="vol_img">
                    <input type="range" class="max-w-full" id="change_vol" onchange="change_vol()" step="0.05" min="0"
                        max="1" value="1">
                </div>
                <div class="row">
                    <div class="col-lg-8 col-md-8 col-sm-8 col-xs-8">
                        <div class="form-group">
                            <input type="text" name="video_url" id="video_url" class="form-control hidden"
                                value="<%= video.videoLink %>"
                                value="https://firebasestorage.googleapis.com/v0/b/emotify-2a2c1.appspot.com/o/Copy%20of%20Untitled%20(1).mp4?alt=media&token=0dec2ca4-0bf6-4c4c-9fcc-6be38d36e234">
                        </div>
                    </div>
                </div>

                <div id="video_div">
                    <video id="theVideoPlaying" src="<%= video.videoLink %>"
                        style="width:60%; max-height:20%; margin:auto; border-radius: 10px; opacity: 0;"
                        controls></video>
                </div>

                <div class="gap-4 grid mb-2 grid-cols-2 select-none" id="emotionsStatistics">

                    <div class="test text-center justify-center">

                        <div class="flex"> <img class="justify-center" src="/assets/images/smileys/happy1.jfif"
                                style="width: 25px;height: 25px;">
                            <h4 class="px-2" id="happyText">Happy</h4>
                        </div>

                        <div class="progress border-2 rounded-full">
                            <div class="progress-bar gradient border-full rounded-full h-2 w-0" role="progressbar"
                                aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" id="happy_progress">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    </div>

                    <div class="test ">
                        <div class="flex"> <img src="/assets/images/smileys/sad.jfif" style="width: 25px;height: 25px;">
                            <h4 class="px-2" id="sadText">Sad </h4>
                        </div>
                        <div class="progress border-2 rounded-full">
                            <div class="progress-bar gradient border-full rounded-full h-2 w-0" role="progressbar"
                                aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" id="sad_progress">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    </div>


                    <div class="test ">
                        <div class="flex"> <img src="/assets/images/smileys/nuetral.jfif"
                                style="width: 25px;height: 25px;">
                            <h4 class="px-2" id="neutralText">Neutral
                            </h4>
                        </div>
                        <div class="progress border-2 rounded-full">
                            <div class="progress-bar gradient border-full rounded-full h-2 w-0" role="progressbar"
                                aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" id="neutral_progress">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    </div>
                    <div class="test ">
                        <div class="flex"> <img src="/assets/images/smileys/dusgusted.jfif"
                                style="height: 25px;width: 25px;">
                            <h4 class="px-2" id="disgustedText">Disgusted
                            </h4>
                        </div>
                        <div class="progress border-2 rounded-full">
                            <div class="progress-bar gradient border-full rounded-full h-2 w-0" role="progressbar"
                                aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" id="disgusted_progress">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    </div>

                    <div class="test ">
                        <div class="flex"> <img src="/assets/images/smileys/angry.jfif"
                                style="width: 25px;height: 25px;">
                            <h4 class="px-2" id="angryText">Angry </h4>
                        </div>
                        <div class="progress border-2 rounded-full">
                            <div class="progress-bar gradient border-full rounded-full h-2 w-0" role="progressbar"
                                aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" id="angry_progress">

                            </div>
                        </div>
                    </div>

                    <div class="test ">
                        <div class="flex"> <img src="/assets/images/smileys/surprised.jfif"
                                style="width: 25px;height: 25px;">
                            <h4 class="px-2" id="surprisedText">Surprised

                            </h4>
                        </div>
                        <div class="progress border-2 rounded-full">
                            <div class="progress-bar gradient border-full rounded-full h-2 w-0" role="progressbar"
                                aria-valuenow="70" aria-valuemin="0" aria-valuemax="100" id="surprised_progress">
                                <span class="sr-only"></span>
                            </div>
                        </div>
                    </div>
                </div>
                <form id="questions" class="px-8 pt-6 pb-8 mb-4 bg-white rounded" action="/login" method="POST">
                    <p class="mb-4 text-center font-bold">Your emotions are saved ! Please
                        answer these questions to continue.</p>

                    <div class="mb-4">
                        <label class="block mb-2 text-sm font-bold text-gray-700" for="Q_general">
                            1. What did you think of this commercial in general?
                        </label>
                        <input required name="Q_general"
                            class="w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline"
                            id="Q_general" type="text" placeholder="..."
                            value="<%= typeof Q_general != 'undefined' ? Q_general : '' %>" />
                    </div>

                    <div class="mb-4">
                        <label class="block mb-2 text-sm font-bold text-gray-700" for="Q_triggered">
                            2. Were you triggered to perform an action?
                        </label>
                        <select
                            class="form-select appearance-none
      block w-full px-3  py-1.5 text-base  font-normal  text-gray-700  bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300
      rounded  transition  ease-in-out  m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                            aria-label="Q_triggered" id="Q_triggered" name="Q_triggered">

                            <option value="1">1/5 (Absolutely not)</option>
                            <option value="2">2/5 (Not really)</option>
                            <option value="3" selected>3/5 (A little bit)</option>
                            <option value="4">4/5 (Yes)</option>
                            <option value="5">5/5 (Yes, of course!)</option>
                        </select>

                    </div>
                    <div class="mb-4">
                        <label class="block mb-2 text-sm font-bold text-gray-700" for="Q_appeal">
                            3. Do you think this commercial will appeal to the target group? Why or why not?
                        </label>

                        <input required name="Q_appeal"
                            class="w-full px-3 py-2 mb-3 text-sm leading-tight text-gray-700 border rounded shadow appearance-none focus:outline-none focus:shadow-outline"
                            id="Q_appeal" type="text" placeholder="..."
                            value="<%= typeof Q_appeal != 'undefined' ? Q_appeal : '' %>" />
                    </div>

                    <div class="mb-6 text-center">

                        <button type="button" id="sendEmotionsButton"
                            class="mx-auto lg:mx-0 hover:underline gradient text-white font-bold rounded-full my-6 py-4 px-8 shadow-lg focus:outline-none focus:shadow-outline transform transition hover:scale-105 duration-300 ease-in-out">
                            Send and earn
                        </button>
                    </div>

                </form>

                <p class="text-center text-red-400 font-bold" id="errorCamera">PLEASE STAY IN FRONT OF THE CAMERA,
                    EMOTIONS ARE NOT TRACKED</p>
                <video id="video_our" width="720" height="560" style="opacity:0; position:fixed" autoplay="autoplay"
                    muted></video>
                <div class="col-lg-3 col-md-3 col-sm-3 col-xs-3" id="video_div">

                </div>


            </div>
        </div>
    </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            startplayer();

        }, false);
        var player;

        function startplayer() {
            player = document.getElementById('theVideoPlaying');
            player.controls = false;
        }

        function play_vid() {
            player.play();
            $("#beforeVideo").slideUp();
        }

        function change_vol() {
            player.volume = document.getElementById("change_vol").value;
        }


        $(document).ready(function () {
            $("#questions").hide();
            $("#emotionsStatistics").hide();
            $("#errorCamera").hide();
            $("#playbutton").hide();
            $("#refreshButton").hide();

            //Hide Questions and text , we will slideDown them when the emotions are saved and the video is finished.

            navigator.getMedia = (navigator.getUserMedia || // use the proper vendor prefix
                navigator.webkitGetUserMedia ||
                navigator.mozGetUserMedia ||
                navigator.msGetUserMedia);
            //Check if webcam is available and usable
            navigator.getMedia({
                video: true
            }, function () {
                setTimeout(function () {
                    $("#playbutton").slideDown();
                    $("#checkWebcam").slideUp();
                    $("#loading").slideUp();
                    $("#theVideoPlaying").css("opacity", 100);

                }, 3000);
                // webcam is available
            }, function () {
                $("#checkWebcam").text(
                    "Your webcam is not available, you can't watch this video. Please try again.");
                $("#refreshButton").slideDown();
                alert("Your webcam is not available, you can't watch this video. Please try again.");
                // webcam is not available
            });

            //Track emotions and make final object
            let final_emotions = {};

            const video = document.getElementById('video_our');
            const theVideo = document.getElementById('theVideoPlaying');
            var videoEnded = false;
            var emotion = [];
            let duration = 0;
            var vid = document.createElement("video");
            video_url();

            function startVideo() {
                navigator.getUserMedia({
                        video: {}
                    },
                    stream => video.srcObject = stream,
                    err => console.error(err)
                )
            }

            function video_url() {
                var video_url = $("#video_url").val();
                if (video_url != '') {
                    var reader = new FileReader();
                    $('#theVideoPlaying').src = video_url;
                    vid.src = video_url;
                    vid.ondurationchange = function () {
                        duration = Math.round(this.duration) * 1000;
                    };

                    // all promise be defined - LOAD FACE API
                    Promise.all([
                        faceapi.nets.tinyFaceDetector.loadFromUri('/assets/models'),
                        faceapi.nets.faceLandmark68Net.loadFromUri('/assets/models'),
                        faceapi.nets.faceRecognitionNet.loadFromUri('/assets/models'),
                        faceapi.nets.faceExpressionNet.loadFromUri('/assets/models')
                    ]).then(startVideo)

                    theVideo.addEventListener('play', () => {
                        // create canvas from media (webcam)
                        const canvas = faceapi.createCanvasFromMedia(video)
                        document.body.append(canvas)
                        // create display canvas
                        const displaySize = {
                            width: video.width,
                            height: video.height
                        }
                        faceapi.matchDimensions(canvas, displaySize);
                        setInterval(async () => {
                            if (!videoEnded) {
                                const detections = await faceapi.detectAllFaces(video,
                                        new faceapi
                                        .TinyFaceDetectorOptions()).withFaceLandmarks()
                                    .withFaceExpressions()
                                const resizedDetections = faceapi.resizeResults(detections,
                                    displaySize)
                                // create 2d canvas
                                canvas.getContext('2d').clearRect(100, 100, canvas.width,
                                    canvas
                                    .height)
                                // create drawDetections canvas
                                faceapi.draw.drawDetections(canvas, resizedDetections)
                                // create drawFaceLandmarks canvas
                                faceapi.draw.drawFaceLandmarks(canvas, resizedDetections)
                                // create drawFaceExpressions canvas
                                faceapi.draw.drawFaceExpressions(canvas, resizedDetections);

                                function emotionRatio(number) {
                                    if (number > 0.30 && number <= 0.70) {
                                        number = 0.5;
                                    }

                                    if (number > 0.70 && number <= 1.30) {
                                        number = 1;
                                    }

                                    if (number < 0.30) {
                                        number = 0;
                                    }
                                    if (number > 1.30 && number <= 3) {
                                        number = 2;
                                    }
                                    if (number > 3) {
                                        number = number;
                                    }
                                    return number;
                                }

                                if (detections.length != 0) {
                                    $("#errorCamera").slideUp();
                                    console.log('=======================');
                                    console.log(detections[0].expressions);
                                    let data = {
                                        sad: emotionRatio(detections[0].expressions
                                            .sad),
                                        disgusted: emotionRatio(detections[0]
                                            .expressions
                                            .disgusted),
                                        neutral: emotionRatio(detections[0].expressions
                                            .neutral),
                                        fearful: emotionRatio(detections[0].expressions
                                            .fearful),
                                        happy: emotionRatio(detections[0].expressions
                                            .happy),
                                        surprised: emotionRatio(detections[0]
                                            .expressions
                                            .surprised),
                                        angry: emotionRatio(detections[0].expressions
                                            .angry),
                                    }
                                    console.log(data);
                                    emotion.push(data);
                                } else {
                                    $("#errorCamera").slideDown();

                                }
                            }
                        }, 50)

                        $("#theVideoPlaying").bind('contextmenu', function () {
                            return false;
                        });

                        theVideo.onended = function () {
                            videoEnded = true;
                            $("#video_our").slideUp();
                            $("#player_controls").slideUp();
                            $("#theVideoPlaying").slideUp();
                            $("#errorCamera").slideUp();
                            $("#playbutton").slideUp();

                            if (emotion.length < 4) {
                                $("#beforeVideo").slideDown();
                                $("#checkWebcam").slideDown();
                                $("#loading").slideUp();

                                $("#checkWebcam").text(
                                    "Your webcam was not available, Please try again.");
                                $("#refreshButton").slideDown();
                            } else {
                                $("#questions").slideDown();
                                calculateNewEmotions(emotion);

                            }
                        };
                        return

                    })


                } else {
                    alert('Please Enter url');
                }
            }


            function calculateNewEmotions(emotions) { // NEW FUNCTION TO CALCULATE EMOTIONS
                var count = 0;
                var sad = 0;
                var neutral = 0;
                var surprised = 0;
                var happy = 0;
                var angry = 0;
                var disgusted = 0;
                // array loops dynamic loops
                if (emotions) {
                    for (let index = 0; index < emotions.length; index++) {
                        if (emotions[index].sad != 0) {
                            sad += emotions[index].sad + emotions[index].fearful;
                        }
                        if (emotions[index].neutral != 0) {

                            neutral += emotions[index].neutral;
                        }
                        if (emotions[index].surprised != 0) {

                            surprised += emotions[index].surprised;
                        }
                        if (emotions[index].happy != 0) {

                            happy += emotions[index].happy;
                        }
                        if (emotions[index].angry != 0) {

                            angry += emotions[index].angry;
                        }
                        if (emotions[index].disgusted !=
                            0) {
                            disgusted += emotions[index].disgusted;
                        }
                    }
                }

                let countedEmotions = {
                    "sad": sad,
                    "disgusted": disgusted,
                    "neutral": neutral,
                    "happy": happy,
                    "surprised": surprised,
                    "angry": angry
                };

                let countAllEmotions = sad + disgusted + neutral + happy + surprised + angry;
                final_emotions = {
                    "sad": Math.round(sad / countAllEmotions * 100),
                    "disgusted": Math.round(disgusted / countAllEmotions * 100),
                    "neutral": Math.round(neutral / countAllEmotions * 100),
                    "happy": Math.round(happy / countAllEmotions * 100),
                    "surprised": Math.round(surprised / countAllEmotions * 100),
                    "angry": Math.round(angry / countAllEmotions * 100)
                };

                console.log("final_emotions:");
                console.log(final_emotions);
                console.log("counted:");
                console.log(countedEmotions);
                slideDownEmotions(final_emotions);
                // sendEmotions(final_emotions);

            }

            /*
                        function calculateEmotions(emotions) { //OLD FUNCTION TO CALCULATE EMOTIONS
                            var count = 0;
                            var sad = 0;
                            var neutral = 0;
                            var surprised = 0;
                            var happy = 0;
                            var angry = 0;
                            var disgusted = 0;
                            var fearful = 0;
                            // array loops dynamic loops
                            if (emotions) {
                                for (let index = 0; index < emotions.length; index++) {
                                    if (emotions[index].sad != 0) {
                                        sad++;
                                    }
                                    if (emotions[index].neutral != 0) {
                                        neutral++;
                                    }
                                    if (emotions[index].surprised != 0) {
                                        surprised++;
                                    }
                                    if (emotions[index].happy != 0) {
                                        happy++;
                                    }
                                    if (emotions[index].angry != 0) {
                                        angry++;
                                    }
                                    if (emotions[index].disgusted !=
                                        0) {
                                        disgusted++;
                                    }
                                    if (emotions[index].fearful != 0) {
                                        fearful++;
                                    }
                                }
                            }
                            var final_neutral = 0;
                            var final_sad = 0;
                            var final_surprised = 0;
                            var final_happy = 0;
                            var final_angry = 0;
                            var final_disgusted = 0;
                            var final_fearful = 0;
                            // dynamically count all emotions
                            if (sad != 0) {
                                count++;
                            }
                            if (surprised != 0) {
                                count++;
                            }
                            if (happy != 0) {
                                count++;
                            }
                            if (angry !=
                                0) {
                                count++;
                            }
                            if (disgusted != 0) {
                                count++;
                            }
                            if (fearful != 0) {
                                count++;
                            } // calculations of face emotions
                            var cals = 100 / count;
                            if (sad >= 100 || sad != 0) {
                                var rn_sad = Math.random().toFixed(2) * 100;
                                final_sad = rn_sad / 100 * Math.floor(cals);
                            }

                            if (surprised >= 100 || surprised != 0) {
                                var rn_surprised = Math.random().toFixed(2) * 100;
                                final_surprised = rn_surprised / 100 * Math.floor(cals);
                            }

                            if (happy >= 100 || happy != 0) {
                                var rn_happy = Math.random().toFixed(2) * 100;
                                final_happy = rn_happy / 100 * Math.floor(cals);
                            }

                            if (angry >= 100 || angry != 0) {
                                var rn_angry = Math.random().toFixed(2) * 100;
                                final_angry = rn_angry / 100 * Math.floor(cals);
                            }

                            if (disgusted >= 100 || disgusted != 0) {
                                var rn_disgusted = Math.random().toFixed(2) * 100;
                                final_disgusted = rn_disgusted / 100 * Math.floor(cals);
                            }

                            if (fearful >= 100 || fearful != 0) {
                                var rn_fearful = Math.random().toFixed(2) * 100;
                                final_fearful = rn_fearful / 100 * Math.floor(cals);
                            }

                            var all_emotion = parseInt(final_sad) + parseInt(final_surprised) + parseInt(final_happy) +
                                parseInt(
                                    final_angry) +
                                parseInt(final_disgusted) + parseInt(final_fearful);
                            final_neutral = 100 - all_emotion;

                            final_emotions = {
                                "sad": final_sad,
                                "disgusted": final_disgusted,
                                "neutral": final_neutral,
                                "fearful": final_fearful,
                                "happy": final_happy,
                                "surprised": final_surprised,
                                "angry": final_angry
                            };
                            console.log("final_emotions");
                            console.log(final_emotions);
                            console.log("received emotions");
                            console.log(emotions);
                            slideDownEmotions(final_emotions);
                            // sendEmotions(final_emotions);

                        }

            */
            function slideDownEmotions(emotions) {
                $("#emotionsStatistics").slideDown();
                $("#happyText").html('Happy ' + Math.floor(emotions.happy) + '%');
                $("#sadText").html('Sad ' + Math.floor(emotions.sad) + '%');
                $("#neutralText").html('Neutral ' + Math.floor(emotions.neutral) + '%');
                $("#surprisedText").html('Surprised ' + Math.floor(emotions.surprised) + '%');
                $("#angryText").html('Angry ' + Math.floor(emotions.angry) + '%');
                $("#disgustedText").html('Disgusted ' + Math.floor(emotions.disgusted) + '%');

                $("#happy_progress").css({
                    width: Math.floor(emotions.happy) + "%",
                });

                $("#sad_progress").css({
                    width: Math.floor(emotions.sad) + "%",
                });

                $("#neutral_progress").css({
                    width: Math.floor(emotions.neutral) + "%",
                });

                $("#disgusted_progress").css({
                    width: Math.floor(emotions.disgusted) + "%",
                });

                $("#angry_progress").css({
                    width: Math.floor(emotions.angry) + "%",
                });

                $("#surprised_progress").css({
                    width: Math.floor(emotions.surprised) + "%",
                });

            }

            // SEND EMOTIONS TO DATABASE
            $("#sendEmotionsButton").on('click', () => {
                let body = {
                    "emotions": final_emotions,
                    "videoId": "<%= video.videoId %>"
                };

                body.Q_general = $("#Q_general").val();
                body.Q_triggered = parseInt($("#Q_triggered").val());
                body.Q_appeal = $("#Q_appeal").val();

                let isOkToSend = true;
                console.log(body.Q_general.length);
                console.log(body.Q_appeal.length);
                if (body.Q_general.length < 10 || body.Q_appeal.length < 10) {
                    $("#errorMessage").text("Incorrect answers, please write sentences.");
                    isOkToSend = false;
                }
                if (body.Q_triggered > 5 || body.Q_triggered < 1) {
                    $("#errorMessage").text("Question 2 is incorrect.");
                    isOkToSend = false;
                }

                if (isOkToSend) {
                    $("#errorMessage").text("");
                    $("#sendEmotionsButton").slideUp();

                    fetch("/viewer/sendEmotions", {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(body)
                    }).then(res => {
                        console.log("Request complete! response:", res);
                        setTimeout(function () {
                            location.href = '/viewer/dashboard';
                        }, 1000);


                    });
                }
                console.log(body);

            });
        })
    </script>

</body>

</html>